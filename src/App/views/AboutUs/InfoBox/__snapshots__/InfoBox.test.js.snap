// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`InfoBox component when provided with props should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <InfoBox
    img="infoBox1.png"
    text="text"
    title="title"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "center": false,
      "children": <div
        className="infoBoxWrapper"
      >
        <img
          alt="title"
          src="infoBox1.png"
        />
        <div
          className="textWrapper"
        >
          <h2>
            title
          </h2>
          <p>
            text
          </p>
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <img
            alt="title"
            src="infoBox1.png"
          />,
          <div
            className="textWrapper"
          >
            <h2>
              title
            </h2>
            <p>
              text
            </p>
          </div>,
        ],
        "className": "infoBoxWrapper",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "title",
            "src": "infoBox1.png",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2>
                title
              </h2>,
              <p>
                text
              </p>,
            ],
            "className": "textWrapper",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "title",
              },
              "ref": null,
              "rendered": "title",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "text",
              },
              "ref": null,
              "rendered": "text",
              "type": "p",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "center": false,
        "children": <div
          className="infoBoxWrapper"
        >
          <img
            alt="title"
            src="infoBox1.png"
          />
          <div
            className="textWrapper"
          >
            <h2>
              title
            </h2>
            <p>
              text
            </p>
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <img
              alt="title"
              src="infoBox1.png"
            />,
            <div
              className="textWrapper"
            >
              <h2>
                title
              </h2>
              <p>
                text
              </p>
            </div>,
          ],
          "className": "infoBoxWrapper",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "title",
              "src": "infoBox1.png",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h2>
                  title
                </h2>,
                <p>
                  text
                </p>,
              ],
              "className": "textWrapper",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "title",
                },
                "ref": null,
                "rendered": "title",
                "type": "h2",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "text",
                },
                "ref": null,
                "rendered": "text",
                "type": "p",
              },
            ],
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
